openapi: 3.1.0
info:
  name: Coaching
  title: Triathlon Coaching and Communication API
  version: 1.2.0
  description: API for managing coaching sessions, athlete communication, and related resources for a triathlon business.
  contact:
    name: API Support
    url: https://wildtrico.com/support
    email: support@wildtrico.com
  x-konnect:
    slug: coaching-v1
    attributes:
      domain: [ "Athlete" ]
      use_case: [ "Engagement" ]
      audience: [ "Coach","Athlete" ]
      data_type: [ "Communication" ]
      business_function: [ "Coaching" ]
      workflow_stage: [ "Train" ]
      integration_type: [ "Support Services" ]
      access_level: [ "Internal", "Partner" ]
      complexity_level: [ "Composite APIs" ]
      industry_focus: [ "Sports Tech" ]
servers:
  - url: https://api.example.com/v1
    description: Production server

components:
  schemas:
    Athlete:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique athlete identifier
        name:
          type: string
          description: Athlete's full name
        email:
          type: string
          format: email
          description: Athlete's email address
        phone:
          type: string
          description: Athlete's phone number
      example:
        id: "a1b2c3d4-e5f6-7890-1234-567890abcdef"
        name: John Doe
        email: john.doe@example.com
        phone: 555-123-4567

    Session:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique session identifier
        athlete_id:
          type: string
          format: uuid
          description: ID of the athlete the session is for
        coach_id:
          type: string
          format: uuid
          description: ID of the coach assigned to the session
        date:
          type: string
          format: date
          description: Date of the session
        start_time:
          type: string
          format: time
          description: Start time of the session
        end_time:
          type: string
          format: time
          description: End time of the session
        type:
          type: string
          enum: [swim, bike, run, strength, recovery]
          description: Type of training session
        description:
          type: string
          description: Session description and planned activities
        location:
          type: string
          description: Location of the session
      example:
        id: "b2c3d4e5-f6a7-8901-2345-678901abcdef"
        athlete_id: "a1b2c3d4-e5f6-7890-1234-567890abcdef"
        coach_id: "c3d4e5f6-a7b8-9012-3456-789012abcdef"
        date: "2024-01-20"
        start_time: "09:00:00"
        end_time: "10:30:00"
        type: swim
        description: Pool session focusing on technique.
        location: City Pool

    Message:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique message identifier
        sender_id:
          type: string
          format: uuid
          description: ID of the sender (athlete or coach)
        recipient_id:
          type: string
          format: uuid
          description: ID of the recipient (athlete or coach)
        timestamp:
          type: string
          format: date-time
          description: Timestamp of the message
        content:
          type: string
          description: Message content
      example:
        id: "c3d4e5f6-a7b8-9012-3456-789012abcdef"
        sender_id: "a1b2c3d4-e5f6-7890-1234-567890abcdef"
        recipient_id: "c4d5e6f7-b8c9-0123-4567-890123abcdef"
        timestamp: "2024-01-15T14:30:00Z"
        content: How did your run feel this morning?

    AthleteList:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Athlete'
        meta:
          type: object
          properties:
            page:
              type: object
              properties:
                offset:
                  type: integer
                  description: The number of items to skip before starting to collect the result set.
                limit:
                  type: integer
                  description: The numbers of items to return.
                total:
                  type: integer
                  description: The total number of items available.
                estimated_total:
                  type: boolean
                  description: If the total number of items is an estimate.

    SessionList:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Session'
        meta:
          type: object
          properties:
            page:
              type: object
              properties:
                offset:
                  type: integer
                  description: The number of items to skip before starting to collect the result set.
                limit:
                  type: integer
                  description: The numbers of items to return.
                total:
                  type: integer
                  description: The total number of items available.
                estimated_total:
                  type: boolean
                  description: If the total number of items is an estimate.

    MessageList:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Message'
        meta:
          type: object
          properties:
            page:
              type: object
              properties:
                offset:
                  type: integer
                  description: The number of items to skip before starting to collect the result set.
                limit:
                  type: integer
                  description: The numbers of items to return.
                total:
                  type: integer
                  description: The total number of items available.
                estimated_total:
                  type: boolean
                  description: If the total number of items is an estimate.

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - bearerAuth: []

tags:
  - name: athletes
    description: Operations related to athletes
  - name: sessions
    description: Operations related to coaching sessions
  - name: messages
    description: Operations related to athlete communication

paths:
  /athletes:
    get:
      summary: List all athletes
      description: Returns a list of athletes with pagination.
      operationId: listAthletes
      tags: [athletes]
      parameters:
        - name: limit
          in: query
          description: Maximum number of items to return
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 100
            default: 20
        - name: offset
          in: query
          description: Number of items to skip
          schema:
            type: integer
            format: int32
            default: 0
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AthleteList'
    post:
      summary: Create a new athlete
      description: Creates a new athlete.
      operationId: createAthlete
      tags: [athletes]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Athlete'
      responses:
        '201':
          description: Athlete created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Athlete'

  /athletes/{athlete_id}:
    get:
      summary: Get an athlete by ID
      description: Returns a single athlete by their ID.
      operationId: getAthleteById
      tags: [athletes]
      parameters:
        - name: athlete_id
          in: path
          required: true
          description: The ID of the athlete to retrieve
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Athlete'
        '404':
          description: Athlete not found

    put:
      summary: Update an athlete
      description: Updates an existing athlete.
      operationId: updateAthlete
      tags: [athletes]
      parameters:
        - name: athlete_id
          in: path
          required: true
          description: The ID of the athlete to update
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Athlete'
      responses:
        '200':
          description: Athlete updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Athlete'
        '404':
          description: Athlete not found

    delete:
      summary: Delete an athlete
      description: Deletes an athlete.
      operationId: deleteAthlete
      tags: [athletes]
      parameters:
        - name: athlete_id
          in: path
          required: true
          description: The ID of the athlete to delete
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Athlete deleted
        '404':
          description: Athlete not found

  /sessions:
    get:
      summary: List all sessions
      description: Returns a list of coaching sessions with pagination.
      operationId: listSessions
      tags: [sessions]
      parameters:
        - name: limit
          in: query
          description: Maximum number of items to return
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 100
            default: 20
        - name: offset
          in: query
          description: Number of items to skip
          schema:
            type: integer
            format: int32
            default: 0
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionList'
    post:
      summary: Create a new session
      description: Creates a new coaching session.
      operationId: createSession
      tags: [sessions]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Session'
      responses:
        '201':
          description: Session created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'

  /sessions/{session_id}:
    get:
      summary: Get a session by ID
      description: Returns a single coaching session by its ID.
      operationId: getSessionById
      tags: [sessions]
      parameters:
        - name: session_id
          in: path
          required: true
          description: The ID of the session to retrieve
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
        '404':
          description: Session not found

    put:
      summary: Update a session
      description: Updates an existing coaching session.
      operationId: updateSession
      tags: [sessions]
      parameters:
        - name: session_id
          in: path
          required: true
          description: The ID of the session to update
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Session'
      responses:
        '200':
          description: Session updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
        '404':
          description: Session not found

    delete:
      summary: Delete a session
      description: Deletes a coaching session.
      operationId: deleteSession
      tags: [sessions]
      parameters:
        - name: session_id
          in: path
          required: true
          description: The ID of the session to delete
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Session deleted
        '404':
          description: Session not found

  /messages:
    get:
      summary: List all messages
      description: Returns a list of messages with pagination.
      operationId: listMessages
      tags: [messages]
      parameters:
        - name: limit
          in: query
          description: Maximum number of items to return
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 100
            default: 20
        - name: offset
          in: query
          description: Number of items to skip
          schema:
            type: integer
            format: int32
            default: 0
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageList'
    post:
      summary: Create a new message
      description: Creates a new message.
      operationId: createMessage
      tags: [messages]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Message'
      responses:
        '201':
          description: Message created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'

  /messages/{message_id}:
    get:
      summary: Get a message by ID
      description: Returns a single message by its ID.
      operationId: getMessageById
      tags: [messages]
      parameters:
        - name: message_id
          in: path
          required: true
          description: The ID of the message to retrieve
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        '404':
          description: Message not found

    put:
      summary: Update a message
      description: Updates an existing message.
      operationId: updateMessage
      tags: [messages]
      parameters:
        - name: message_id
          in: path
          required: true
          description: The ID of the message to update
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Message'
      responses:
        '200':
          description: Message updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        '404':
          description: Message not found

    delete:
      summary: Delete a message
      description: Deletes a message.
      operationId: deleteMessage
      tags: [messages]
      parameters:
        - name: message_id
          in: path
          required: true
          description: The ID of the message to delete
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Message deleted
        '404':
          description: Message not found
