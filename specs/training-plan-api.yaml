openapi: 3.1.0
info:
  name: Training Plan
  title: Triathlon Training Plan API
  version: 1.1.0
  description: API for creating and managing training plans for triathlon athletes.
  contact:
    name: API Support
    url: https://wildtrico.com/support
    email: support@wildtrico.com
  x-konnect:
    slug: training-v1
    attributes:
      domain: [ "Athlete" ]
      use_case: [ "Performance" ]
      audience: [ "Coach","Athlete" ]
      data_type: [ "Schedules" ]
      business_function: [ "Training" ]
      workflow_stage: [ "Plan", "Train" ]
      integration_type: [ "Support Services" ]
      access_level: [ "Partner", "Internal" ]
      complexity_level: [ "Composite" ]
      industry_focus: [ "Sports Tech" ]
servers:
  - url: https://api.example.com/v1
    description: Production server
tags:
  - name: Training Plans
    description: Operations related to athlete training plans.
  - name: Athletes
    description: Operations related to athlete management.
components:
  schemas:
    TrainingPlan:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the training plan.
        athlete_id:
          type: string
          format: uuid
          description: Unique identifier for the athlete.
        name:
          type: string
          description: Name of the training plan.
        description:
          type: string
          description: Detailed description of the training plan.
        start_date:
          type: string
          format: date
          description: Start date of the training plan.
        end_date:
          type: string
          format: date
          description: End date of the training plan.
        sport_type:
          type: string
          enum: [swim, bike, run, strength, transition]
          description: Type of sport for the training plan.
        status:
          type: string
          enum: [active, completed, draft, archived]
          description: Status of the training plan.
        created_at:
          type: string
          format: date-time
          description: Timestamp when the training plan was created.
        updated_at:
          type: string
          format: date-time
          description: Timestamp when the training plan was last updated.
      required:
        - athlete_id
        - name
        - start_date
        - end_date
        - sport_type
    TrainingPlanList:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/TrainingPlan'
        meta:
          type: object
          properties:
            page:
              type: object
              properties:
                limit:
                  type: integer
                  description: Number of items per page.
                offset:
                  type: integer
                  description: Offset from the first item.
                total:
                  type: integer
                  description: Total number of items.
                estimated_total:
                  type: boolean
                  description: Indicates if the total is estimated.
    Athlete:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the athlete.
        first_name:
          type: string
          description: First name of the athlete.
        last_name:
          type: string
          description: Last name of the athlete.
        email:
          type: string
          format: email
          description: Email address of the athlete.
        phone:
          type: string
          description: Phone number of the athlete.
        date_of_birth:
          type: string
          format: date
          description: Date of birth of the athlete.
        created_at:
          type: string
          format: date-time
          description: Timestamp when the athlete was created.
        updated_at:
          type: string
          format: date-time
          description: Timestamp when the athlete was last updated.
      required:
        - first_name
        - last_name
        - email
    Error:
      type: object
      properties:
        code:
          type: integer
          description: Error code.
        message:
          type: string
          description: Error message.
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
security:
  - bearerAuth: []
paths:
  /athletes:
    post:
      summary: Create a new athlete
      description: Creates a new athlete.
      operationId: createAthlete
      tags:
        - Athletes
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Athlete'
      responses:
        '201':
          description: Athlete created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Athlete'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      summary: List athletes with pagination
      description: Retrieves a list of athletes with pagination.
      operationId: listAthletes
      tags:
        - Athletes
      parameters:
        - name: limit
          in: query
          description: Maximum number of items to return
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 100
            default: 20
        - name: offset
          in: query
          description: Number of items to skip
          schema:
            type: integer
            format: int32
            default: 0
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Athlete'
                  meta:
                    type: object
                    properties:
                      page:
                        type: object
                        properties:
                          limit:
                            type: integer
                            description: Number of items per page.
                          offset:
                            type: integer
                            description: Offset from the first item.
                          total:
                            type: integer
                            description: Total number of items.
                          estimated_total:
                            type: boolean
                            description: Indicates if the total is estimated.
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /athletes/{athlete_id}:
    get:
      summary: Get an athlete by ID
      description: Retrieves an athlete by their ID.
      operationId: getAthlete
      tags:
        - Athletes
      parameters:
        - name: athlete_id
          in: path
          required: true
          description: ID of the athlete to retrieve
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Athlete'
        '404':
          description: Athlete not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update an existing athlete
      description: Updates an existing athlete.
      operationId: updateAthlete
      tags:
        - Athletes
      parameters:
        - name: athlete_id
          in: path
          required: true
          description: ID of the athlete to update
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Athlete'
      responses:
        '200':
          description: Athlete updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Athlete'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Athlete not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete an athlete
      description: Deletes an athlete.
      operationId: deleteAthlete
      tags:
        - Athletes
      parameters:
        - name: athlete_id
          in: path
          required: true
          description: ID of the athlete to delete
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Athlete deleted successfully
        '404':
          description: Athlete not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /training-plans:
    get:
      summary: List training plans with pagination
      description: Retrieves a list of training plans with pagination.
      operationId: listTrainingPlans
      tags:
        - Training Plans
      parameters:
        - name: limit
          in: query
          description: Maximum number of items to return
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 100
            default: 20
        - name: offset
          in: query
          description: Number of items to skip
          schema:
            type: integer
            format: int32
            default: 0
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrainingPlanList'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create a new training plan
      description: Creates a new training plan.
      operationId: createTrainingPlan
      tags:
        - Training Plans
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TrainingPlan'
      responses:
        '201':
          description: Training plan created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrainingPlan'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /training-plans/{training_plan_id}:
    get:
      summary: Get a training plan by ID
      description: Retrieves a training plan by its ID.
      operationId: getTrainingPlan
      tags:
        - Training Plans
      parameters:
        - name: training_plan_id
          in: path
          required: true
          description: ID of the training plan to retrieve
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrainingPlan'
        '404':
          description: Training plan not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update an existing training plan
      description: Updates an existing training plan.
      operationId: updateTrainingPlan
      tags:
        - Training Plans
      parameters:
        - name: training_plan_id
          in: path
          required: true
          description: ID of the training plan to update
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TrainingPlan'
      responses:
        '200':
          description: Training plan updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrainingPlan'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Training plan not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete a training plan
      description: Deletes a training plan.
      operationId: deleteTrainingPlan
      tags:
        - Training Plans
      parameters:
        - name: training_plan_id
          in: path
          required: true
          description: ID of the training plan to delete
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Training plan deleted successfully
        '404':
          description: Training plan not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
