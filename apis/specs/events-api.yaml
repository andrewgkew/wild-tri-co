openapi: 3.1.0
info:
  name: Events
  title: Triathlon Event and Athlete Management API
  version: 1.1.5
  description: API for managing athletes, events, and registrations for triathlon events.
  contact:
    name: API Support
    url: https://wildtrico.com/support
    email: support@wildtrico.com
servers:
  - url: https://api.example.com/v1
    description: Production server
tags:
  - name: Athletes
    description: Operations related to athlete management
  - name: Events
    description: Operations related to triathlon event management
  - name: Registrations
    description: Operations related to event registrations
components:
  schemas:
    Athlete:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the athlete
        firstName:
          type: string
          description: Athlete's first name
        lastName:
          type: string
          description: Athlete's last name
        email:
          type: string
          format: email
          description: Athlete's email address
        dateOfBirth:
          type: string
          format: date
          description: Athlete's date of birth
        gender:
          type: string
          enum: [male, female, other]
          description: Athlete's gender
        contactNumber:
          type: string
          description: Athlete's contact phone number
        emergencyContactName:
          type: string
          description: Athlete's emergency contact name
        emergencyContactNumber:
          type: string
          description: Athlete's emergency contact number
      required:
        - firstName
        - lastName
        - email
        - dateOfBirth
        - gender
        - contactNumber
        - emergencyContactName
        - emergencyContactNumber
      example:
        id: "a1b2c3d4-e5f6-7890-1234-567890abcdef"
        firstName: John
        lastName: Doe
        email: john.doe@example.com
        dateOfBirth: 1990-01-01
        gender: male
        contactNumber: 123-456-7890
        emergencyContactName: Jane Doe
        emergencyContactNumber: 098-765-4321
    Event:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the event
        name:
          type: string
          description: Name of the event
        description:
          type: string
          description: Detailed description of the event
        date:
          type: string
          format: date
          description: Date of the event
        location:
          type: string
          description: Location of the event
        type:
          type: string
          enum: [triathlon, duathlon, aquathlon]
          description: Type of event
        distanceSwim:
          type: number
          format: float
          description: Swim distance in kilometers
        distanceBike:
          type: number
          format: float
          description: Bike distance in kilometers
        distanceRun:
          type: number
          format: float
          description: Run distance in kilometers
        maxParticipants:
          type: integer
          description: Maximum number of participants allowed
      required:
        - name
        - description
        - date
        - location
        - type
        - distanceSwim
        - distanceBike
        - distanceRun
        - maxParticipants
      example:
        id: "b2c3d4e5-f6a7-8901-2345-678901abcdef"
        name: Example Triathlon
        description: A standard distance triathlon
        date: 2024-07-20
        location: Example City
        type: triathlon
        distanceSwim: 1.5
        distanceBike: 40
        distanceRun: 10
        maxParticipants: 200
    Registration:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the registration
        athleteId:
          type: string
          format: uuid
          description: ID of the athlete
        eventId:
          type: string
          format: uuid
          description: ID of the event
        registrationDate:
          type: string
          format: date-time
          description: Date and time of registration
        status:
          type: string
          enum: [pending, confirmed, cancelled]
          description: Registration status
      required:
        - athleteId
        - eventId
        - registrationDate
        - status
      example:
        id: "c3d4e5f6-a7b8-9012-3456-789012abcdef"
        athleteId: "a1b2c3d4-e5f6-7890-1234-567890abcdef"
        eventId: "b2c3d4e5-f6a7-8901-2345-678901abcdef"
        registrationDate: 2024-05-01T10:00:00Z
        status: confirmed
    AthleteList:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Athlete'
        meta:
          type: object
          properties:
            page:
              type: object
              properties:
                offset:
                  type: integer
                  description: The number of items to skip before starting to collect the result set
                limit:
                  type: integer
                  description: The numbers of items to return
                total:
                  type: integer
                  description: The total number of items available
                estimated_total:
                  type: boolean
                  description: If the total number of items is an estimate
    EventList:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Event'
        meta:
          type: object
          properties:
            page:
              type: object
              properties:
                offset:
                  type: integer
                  description: The number of items to skip before starting to collect the result set
                limit:
                  type: integer
                  description: The numbers of items to return
                total:
                  type: integer
                  description: The total number of items available
                estimated_total:
                  type: boolean
                  description: If the total number of items is an estimate
    RegistrationList:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Registration'
        meta:
          type: object
          properties:
            page:
              type: object
              properties:
                offset:
                  type: integer
                  description: The number of items to skip before starting to collect the result set
                limit:
                  type: integer
                  description: The numbers of items to return
                total:
                  type: integer
                  description: The total number of items available
                estimated_total:
                  type: boolean
                  description: If the total number of items is an estimate
  responses:
    BadRequestError:
      description: Bad request due to invalid input
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                description: Error message
            example:
              error: Invalid input
    NotFoundError:
      description: Resource not found
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                description: Error message
            example:
              error: Resource not found
    ServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                description: Error message
            example:
              error: Internal server error
paths:
  /athletes:
    post:
      summary: Create a new athlete
      description: Creates a new athlete.
      operationId: createAthlete
      tags: [Athletes]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Athlete'
      responses:
        '201':
          description: Athlete created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Athlete'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '500':
          $ref: '#/components/responses/ServerError'
    get:
      summary: List all athletes with pagination
      description: Retrieves a list of athletes with pagination.
      operationId: listAthletes
      tags: [Athletes]
      parameters:
        - name: limit
          in: query
          description: Maximum number of items to return
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 100
            default: 20
        - name: offset
          in: query
          description: Number of items to skip for pagination
          schema:
            type: integer
            format: int32
            minimum: 0
            default: 0
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AthleteList'
        '500':
          $ref: '#/components/responses/ServerError'
  /athletes/{id}:
    get:
      summary: Get an athlete by ID
      description: Retrieves an athlete by their unique ID.
      operationId: getAthleteById
      tags: [Athletes]
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the athlete to retrieve
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Athlete'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/ServerError'
    put:
      summary: Update an athlete by ID
      description: Updates an existing athlete's information.
      operationId: updateAthlete
      tags: [Athletes]
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the athlete to update
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Athlete'
      responses:
        '200':
          description: Athlete updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Athlete'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      summary: Delete an athlete by ID
      description: Deletes an athlete by their unique ID.
      operationId: deleteAthlete
      tags: [Athletes]
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the athlete to delete
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Athlete deleted successfully
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/ServerError'
  /events:
    post:
      summary: Create a new event
      description: Creates a new triathlon event.
      operationId: createEvent
      tags: [Events]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
      responses:
        '201':
          description: Event created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '500':
          $ref: '#/components/responses/ServerError'
    get:
      summary: List all events with pagination
      description: Retrieves a list of triathlon events with pagination.
      operationId: listEvents
      tags: [Events]
      parameters:
        - name: limit
          in: query
          description: Maximum number of items to return
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 100
            default: 20
        - name: offset
          in: query
          description: Number of items to skip for pagination
          schema:
            type: integer
            format: int32
            minimum: 0
            default: 0
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventList'
        '500':
          $ref: '#/components/responses/ServerError'
  /events/{id}:
    get:
      summary: Get an event by ID
      description: Retrieves a specific triathlon event by its unique ID.
      operationId: getEventById
      tags: [Events]
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the event to retrieve
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/ServerError'
    put:
      summary: Update an event by ID
      description: Updates an existing triathlon event's information.
      operationId: updateEvent
      tags: [Events]
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the event to update
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
      responses:
        '200':
          description: Event updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      summary: Delete an event by ID
      description: Deletes a triathlon event by its unique ID.
      operationId: deleteEvent
      tags: [Events]
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the event to delete
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Event deleted successfully
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/ServerError'
  /registrations:
    post:
      summary: Register an athlete for an event
      description: Registers an athlete for a specific triathlon event.
      operationId: createRegistration
      tags: [Registrations]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Registration'
      responses:
        '201':
          description: Registration created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Registration'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '500':
          $ref: '#/components/responses/ServerError'
    get:
      summary: List all registrations with pagination
      description: Retrieves a list of all event registrations with pagination.
      operationId: listRegistrations
      tags: [Registrations]
      parameters:
        - name: limit
          in: query
          description: Maximum number of items to return
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 100
            default: 20
        - name: offset
          in: query
          description: Number of items to skip for pagination
          schema:
            type: integer
            format: int32
            minimum: 0
            default: 0
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegistrationList'
        '500':
          $ref: '#/components/responses/ServerError'
  /registrations/{id}:
    get:
      summary: Get a registration by ID
      description: Retrieves a specific registration by its unique ID.
      operationId: getRegistrationById
      tags: [Registrations]
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the registration to retrieve
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Registration'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/ServerError'
    put:
      summary: Update a registration by ID
      description: Updates an existing registration's information.
      operationId: updateRegistration
      tags: [Registrations]
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the registration to update
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Registration'
      responses:
        '200':
          description: Registration updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Registration'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      summary: Delete a registration by ID
      description: Deletes a registration by its unique ID.
      operationId: deleteRegistration
      tags: [Registrations]
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the registration to delete
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Registration deleted successfully
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/ServerError'
