openapi: 3.1.0
info:
  name: Diet
  title: Triathlon Athlete Diet and Meal Planning API
  version: 1.0.0
  description: API to manage athlete diets and meal plans for triathlon training.
  contact:
    name: API Support
    url: https://wildtrico.com/support
    email: support@wildtrico.com
servers:
  - url: https://api.wildtrico.com/meals
    description: Production server
  - url: https://api.uat.wildtrico.com/meals
    description: UAT server
security:
  - apiKeyAuth: []
tags:
  - name: Athletes
    description: Operations related to athletes.
  - name: Diet Plans
    description: Operations related to diet plans.
  - name: Meals
    description: Operations related to meals.
components:
  schemas:
    Athlete:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the athlete.
        name:
          type: string
          description: Name of the athlete.
        email:
          type: string
          format: email
          description: Email address of the athlete.
        sport_level:
          type: string
          description: Sport level of the athlete.
        weight_kg:
          type: number
          format: float
          description: Weight of the athlete in kilograms.
        height_cm:
          type: integer
          description: Height of the athlete in centimeters.
      required:
        - id
        - name
        - email
    DietPlan:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the diet plan.
        athlete_id:
          type: string
          format: uuid
          description: ID of the athlete this plan is for.
        name:
          type: string
          description: Name of the diet plan.
        description:
          type: string
          description: Description of the diet plan.
        start_date:
          type: string
          format: date
          description: Start date of the diet plan.
        end_date:
          type: string
          format: date
          description: End date of the diet plan.
      required:
        - id
        - athlete_id
        - name
    Meal:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the meal.
        diet_plan_id:
          type: string
          format: uuid
          description: ID of the diet plan this meal belongs to.
        name:
          type: string
          description: Name of the meal.
        description:
          type: string
          description: Description of the meal.
        calories:
          type: integer
          description: Number of calories in the meal.
        protein_grams:
          type: number
          format: float
          description: Amount of protein in grams.
        fat_grams:
          type: number
          format: float
          description: Amount of fat in grams.
        carb_grams:
          type: number
          format: float
          description: Amount of carbohydrates in grams.
      required:
        - id
        - diet_plan_id
        - name
    AthleteList:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Athlete'
        meta:
          type: object
          properties:
            page:
              type: object
              properties:
                offset:
                  type: integer
                  description: The page number.
                limit:
                  type: integer
                  description: The maximum number of items per page.
                total:
                  type: integer
                  description: The total number of items.
                estimated_total:
                  type: boolean
                  description: Indicates if the total number of items is estimated.
    DietPlanList:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/DietPlan'
        meta:
          type: object
          properties:
            page:
              type: object
              properties:
                offset:
                  type: integer
                  description: The page number.
                limit:
                  type: integer
                  description: The maximum number of items per page.
                total:
                  type: integer
                  description: The total number of items.
                estimated_total:
                  type: boolean
                  description: Indicates if the total number of items is estimated.
    MealList:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Meal'
        meta:
          type: object
          properties:
            page:
              type: object
              properties:
                offset:
                  type: integer
                  description: The page number.
                limit:
                  type: integer
                  description: The maximum number of items per page.
                total:
                  type: integer
                  description: The total number of items.
                estimated_total:
                  type: boolean
                  description: Indicates if the total number of items is estimated.
  securitySchemes:
    apiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
security:
  - bearerAuth: []
paths:
  /athletes:
    get:
      summary: List athletes
      description: Retrieve a list of athletes with pagination.
      operationId: listAthletes
      tags:
        - Athletes
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
            default: 20
            minimum: 1
            maximum: 100
          description: Maximum number of results to return per page.
        - in: query
          name: offset
          schema:
            type: integer
            default: 0
            minimum: 0
          description: The number of results to skip.
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AthleteList'
    post:
      summary: Create athlete
      description: Create a new athlete.
      operationId: createAthlete
      tags:
        - Athletes
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Athlete'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Athlete'
  /athletes/{athlete-id}:
    get:
      summary: Get athlete by ID
      description: Retrieve a specific athlete by their ID.
      operationId: getAthleteById
      tags:
        - Athletes
      parameters:
        - in: path
          name: athlete-id
          required: true
          schema:
            type: string
            format: uuid
          description: The ID of the athlete to retrieve.
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Athlete'
        '404':
          description: Athlete not found
  /diet-plans:
    get:
      summary: List diet plans
      description: Retrieve a list of diet plans with pagination.
      operationId: listDietPlans
      tags:
        - Diet Plans
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
            default: 20
            minimum: 1
            maximum: 100
          description: Maximum number of results to return per page.
        - in: query
          name: offset
          schema:
            type: integer
            default: 0
            minimum: 0
          description: The number of results to skip.
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DietPlanList'
    post:
      summary: Create diet plan
      description: Create a new diet plan.
      operationId: createDietPlan
      tags:
        - Diet Plans
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DietPlan'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DietPlan'
  /diet-plans/{diet-plan-id}:
    get:
      summary: Get diet plan by ID
      description: Retrieve a specific diet plan by its ID.
      operationId: getDietPlanById
      tags:
        - Diet Plans
      parameters:
        - in: path
          name: diet-plan-id
          required: true
          schema:
            type: string
            format: uuid
          description: The ID of the diet plan to retrieve.
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DietPlan'
        '404':
          description: Diet plan not found
  /meals:
    get:
      summary: List meals
      description: Retrieve a list of meals with pagination.
      operationId: listMeals
      tags:
        - Meals
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
            default: 20
            minimum: 1
            maximum: 100
          description: Maximum number of results to return per page.
        - in: query
          name: offset
          schema:
            type: integer
            default: 0
            minimum: 0
          description: The number of results to skip.
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MealList'
    post:
      summary: Create meal
      description: Create a new meal.
      operationId: createMeal
      tags:
        - Meals
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Meal'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Meal'
  /meals/{meal-id}:
    get:
      summary: Get meal by ID
      description: Retrieve a specific meal by its ID.
      operationId: getMealById
      tags:
        - Meals
      parameters:
        - in: path
          name: meal-id
          required: true
          schema:
            type: string
            format: uuid
          description: The ID of the meal to retrieve.
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Meal'
        '404':
          description: Meal not found
